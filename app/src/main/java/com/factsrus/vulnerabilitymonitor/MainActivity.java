package com.factsrus.vulnerabilitymonitor;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.os.StrictMode;
import android.support.v7.app.AppCompatActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Toast;

import java.io.IOException;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private ListView mainList;
    private Button refreshBtn;
    private RESTService restService = new RESTService();
    //Values set into preferences by default for the size of list to obtain
    private final String defaultListKey = "UpdateSize";
    private final int defaultListValue = 25;
    private final String defaultUpdateRateKey = "UpdateRate";
    private final int defaultUpdateRateValue = 0;


    private void updateList()
    {
        ConnectivityManager connMgr = (ConnectivityManager)
                getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
        if (networkInfo != null && networkInfo.isConnected()) {
            //Call RESTService & use getPreferences(Context.MODE_PRIVATE).getInt(defaultListKey, defaultListValue);
            ArrayList<Project> projects = new ArrayList<Project>();
            try {
                projects = restService.getProjects(getPreferences(Context.MODE_PRIVATE).getInt(defaultListKey,defaultListValue));
                Project android = new Project();
                android.setArtifactID("android");
                android.setGroupID("com.google.android");
                android.setID("com.google.android:android:2.2.1");
                android.setVersion("2.2.1");
                projects.add(0,android);
            } catch (IOException e) {
                Toast.makeText(this, "Error fetching projects.\nServer may be down.", Toast.LENGTH_LONG).show();
            }
            if(projects.size() == 0)
            {
                mainList.setAdapter(new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, new String[]{"Error connecting to server."}));
                mainList.setClickable(false);
            }
            else
            {
                mainList.setAdapter(new ArrayAdapter<Project>(this, android.R.layout.simple_list_item_1, projects));
                mainList.setClickable(true);
                mainList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Project entry = (Project) parent.getItemAtPosition(position);
                        Intent intent = new Intent(view.getContext(), ProjectDetailsActivity.class);
                        intent.putExtra("id", entry.getID());
                        startActivity(intent);
                    }
                });
            }
        } else {
            // display error
            Toast.makeText(this, "Error. No internet connection.", Toast.LENGTH_LONG).show();
            return;
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        mainList = (ListView) findViewById(R.id.MainList);
        /*Init default values
        if(!getPreferences(Context.MODE_PRIVATE).contains(defaultListKey)) {
            getPreferences(Context.MODE_PRIVATE).edit().putInt(defaultListKey, defaultListValue).commit();
        }
        if(!getPreferences(Context.MODE_PRIVATE).contains(defaultUpdateRateKey)) {
            getPreferences(Context.MODE_PRIVATE).edit().putInt(defaultUpdateRateKey, defaultUpdateRateValue).commit();
        }*/

        updateList();
        refreshBtn = (Button) findViewById(R.id.refreshBtn);

        refreshBtn.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                updateList();
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_rateSettings) {
            int i = getPreferences(Context.MODE_PRIVATE).getInt(defaultUpdateRateKey,defaultUpdateRateValue);
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setTitle("Choose an update interval.")
                    .setSingleChoiceItems(new String[]{"Never","Hourly","Daily","Weekly"},i, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int pos) {
                    getPreferences(Context.MODE_PRIVATE).edit().remove(defaultUpdateRateKey).putInt(defaultUpdateRateKey, pos).commit();
                }
            }).show();
            return true;
        }
        else{
            if (id == R.id.action_listSettings) {
                int i = getPreferences(Context.MODE_PRIVATE).getInt(defaultListKey,defaultListValue);
                switch(i){
                    case 10:
                        i=0;
                        break;
                    case 25:
                        i=1;
                        break;
                    case 50:
                        i=2;
                        break;
                    case 100:
                        i=3;
                        break;
                }
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Choose the number of projects to fetch.")
                        .setSingleChoiceItems(new String[]{"10","25","50","100"},i, new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int pos) {
                                switch(pos){
                                    case 0:
                                        getPreferences(Context.MODE_PRIVATE).edit().remove(defaultListKey).putInt(defaultListKey, 10).commit();
                                        break;
                                    case 1:
                                        getPreferences(Context.MODE_PRIVATE).edit().remove(defaultListKey).putInt(defaultListKey, 25).commit();
                                        break;
                                    case 2:
                                        getPreferences(Context.MODE_PRIVATE).edit().remove(defaultListKey).putInt(defaultListKey, 50).commit();
                                        break;
                                    case 3:
                                        getPreferences(Context.MODE_PRIVATE).edit().remove(defaultListKey).putInt(defaultListKey, 100).commit();
                                        break;
                                }

                            }
                        }).show();
                return true;
            }
        }

        return super.onOptionsItemSelected(item);
    }
}
