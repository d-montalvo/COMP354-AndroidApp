package com.factsrus.vulnerabilitymonitor;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

public class RESTService {


    ///////////////////////////////////////////////////////////////////
    //   Method Executes GET request and returns the response data.  //
    ///////////////////////////////////////////////////////////////////

    public static String httpGet(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection conn =
                (HttpURLConnection) url.openConnection();
        StringBuilder sb = null;

        try {
            if (conn.getResponseCode() != 200) {
                throw new IOException(conn.getResponseMessage());
            }

            // Buffer the result into a string
            BufferedReader rd = new BufferedReader(
                    new InputStreamReader(conn.getInputStream()));
            sb = new StringBuilder();
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
            rd.close();
        }
        finally{
            conn.disconnect();
        }


        return sb.toString();
    }


    ///////////////////////////////////////////////////
    //  Methods which parse JSON results into lists  //
    ///////////////////////////////////////////////////

	
	/*Utility method parsing the JSON into a project list.*/

    public ArrayList<Project> decodeProjectJSON(String json) {

        ArrayList<Project> allProjects = new ArrayList<Project>();

        JSONObject jsonObj = null;
        try {
            jsonObj = new JSONObject(json);


            JSONArray arr = jsonObj.getJSONArray("project");

            for (int i = 0; i < arr.length(); i++) {
                Project project = new Project();

                project.setArtifactID(arr.getJSONObject(i).getString("artifactID"));
                project.setGroupID(arr.getJSONObject(i).getString("groupID"));
                project.setID(arr.getJSONObject(i).getString("id"));
                project.setVersion(arr.getJSONObject(i).getString("version"));

                allProjects.add(project);
            }

            return allProjects;
        } catch (JSONException e) {
            return null;
        }
    }

	
	
	/*Utility method parsing the JSON into a vulnerability list.*/

    public ArrayList<Vulnerability> decodeVulnerabilityJSON(String json) {

        ArrayList<Vulnerability> allVulnerabilities = new ArrayList<Vulnerability>();
        JSONObject jsonObj = null;
        try {
            jsonObj = new JSONObject(json);

            JSONArray arr = jsonObj.getJSONArray("vulnerability");

            for (int i = 0; i < arr.length(); i++) {
                Vulnerability vulnerability = new Vulnerability();

                vulnerability.setDisclosureDate(arr.getJSONObject(i).getString("disclosureDate"));
                vulnerability.setSeverity(arr.getJSONObject(i).getString("severity"));
                vulnerability.setVulnID(arr.getJSONObject(i).getString("vulnID"));

                allVulnerabilities.add(vulnerability);
            }
            return allVulnerabilities;
        } catch (JSONException e) {
            return null;
        }
    }
	
	
	
	/*Utility method parsing the JSON of a single detailed project.*/

    public Project decodeDetailedJSON(String json) {
        Project project = new Project();

        JSONObject jsonObj = null;
        try {
            jsonObj = new JSONObject(json);


            project.setArtifactID(jsonObj.getString("artifactID"));
            JSONArray arrDependents = jsonObj.getJSONArray("dependents");

            for (int i = 0; i < arrDependents.length(); i++)        //*****************************Note: Should ignore dependents of dependents. Make sure this works.*************************
            {
                Project dependent = new Project();

                dependent.setArtifactID(arrDependents.getJSONObject(i).getString("artifactID"));
                dependent.setGroupID(arrDependents.getJSONObject(i).getString("groupID"));
                dependent.setID(arrDependents.getJSONObject(i).getString("id"));
                dependent.setVersion(arrDependents.getJSONObject(i).getString("version"));

                project.addDependent(dependent);
            }

            project.setGroupID(jsonObj.getString("groupID"));
            project.setID(jsonObj.getString("id"));
            project.setVersion(jsonObj.getString("version"));
            JSONArray arrVulnerabilities = jsonObj.getJSONArray("vulnerabilities");

            for (int i = 0; i < arrVulnerabilities.length(); i++) {
                Vulnerability vulnerability = new Vulnerability();

                vulnerability.setDisclosureDate(arrVulnerabilities.getJSONObject(i).getString("disclosureDate"));
                vulnerability.setSeverity(arrVulnerabilities.getJSONObject(i).getString("severity"));
                vulnerability.setVulnID(arrVulnerabilities.getJSONObject(i).getString("vulnID"));

                project.addVulnerability(vulnerability);
            }


            return project;

        } catch (JSONException e) {
            return null;
        }
    }


    //////////////////////////////////////////////////
    //  Methods which retrieve project information  //
    //////////////////////////////////////////////////


    /*Gets a project from server based on Id.*/
    public Project getProject(String id, boolean isDetailed) throws IOException {
        String url, result;
        url = "http://aseg.cs.concordia.ca/segps-rest/project/" + id + "&wt=json&detailed=" + isDetailed;
        result = httpGet(url);
        ArrayList<Project> temp = decodeProjectJSON(result);
        if (temp == null) {
            return null;
        }
        return decodeProjectJSON(result).get(0);

    }

    /* Gets all projects*/
    public ArrayList<Project> getProjects(int numRows) throws IOException {
        String result;
        result = httpGet("http://aseg.cs.concordia.ca/segps-rest/project/list?rows=" + numRows + "&wt=json");
        return decodeProjectJSON(result);
    }

	/*Gets projects based on parameters*/
	/*public ArrayList<Project> getProjects(String[] params, int numRows){
		
	}*/

    /*Alternative to get projects by their group Id*/
    public ArrayList<Project> getProjectsByGID(String groupId, int numRows) throws IOException {
        String url, result;
        url = "http://aseg.cs.concordia.ca/segps-rest/search/project/select?g=" + groupId + "&rows=" + numRows + "&wt=json";
        result = httpGet(url);
        return decodeProjectJSON(result);
    }

    /*Alternative to get projects by their artifact Id*/
    public ArrayList<Project> getProjectsByAID(String artifactID, int numRows) throws IOException {
        String url, result;
        url = "http://aseg.cs.concordia.ca/segps-rest/search/project/select?a=" + artifactID + "&rows=" + numRows + "&wt=json";
        result = httpGet(url);
        return decodeProjectJSON(result);
    }

    /* Alternative to get projects by their cpeId*/
    public ArrayList<Project> getProjectsByCID(String cpeId, int numRows) throws IOException {
        String url, result;
        url = "http://aseg.cs.concordia.ca/segps-rest/search/project/select?cpe=" + cpeId + "&rows=" + numRows + "&wt=json";
        result = httpGet(url);
        return decodeProjectJSON(result);
    }


    ////////////////////////////////////////////////////////
    //  Methods which retrieve vulnerability information  //
    ////////////////////////////////////////////////////////


    /*Get all vulnerabilities*/
    public ArrayList<Vulnerability> getVulnerabilities(int numRows) throws IOException {
        String result;
        result = httpGet("http://aseg.cs.concordia.ca/segps-rest/vulnerability/list?rows=" + numRows + "&wt=json");
        return decodeVulnerabilityJSON(result);
    }

    /*Get specific vulnerability by Id.*/
    public Vulnerability getVulnerability(String id, int numRows) throws IOException {
        String url, result;
        url = "http://aseg.cs.concordia.ca/segps-rest/vulnerability/" + id + "&wt=json";
        result = httpGet(url);

        ArrayList<Vulnerability> temp = decodeVulnerabilityJSON(result);
        if (temp == null) {
            return null;
        }
        return decodeVulnerabilityJSON(result).get(0);
    }

    /*Get vulnerabilities by severity*/
    public ArrayList<Vulnerability> getVulnerabilities(String query, int numRows) throws IOException {
        String url, result;
        url = "http://aseg.cs.concordia.ca/segps-rest/search/vulnerability/select?score=" + query + "&rows=" + numRows + "&wt=json";
        result = httpGet(url);
        return decodeVulnerabilityJSON(result);
    }


}
